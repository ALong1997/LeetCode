package LeetCode

/*
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
你能不将整数转为字符串来解决这个问题吗？
*/

/*
解法: 暴力解
当 x < 0 时，x 不是回文数。数字的最后一位是 0，不是回文数。
为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。

结果: 执行用时 :24 ms 内存消耗 :5.2 MB
*/
func isPalindrome(x int) bool {
	if x < 0 || (x%10 == 0 && x != 0) {
		return false
	}
	reverseX := 0
	for x > reverseX {
		reverseX = reverseX*10 + x%10
		x /= 10
	}
	// 当数字长度为奇数时，我们可以通过 reverseX/10 去除处于中位的数字。
	// 例如，当输入为 12321 时，在循环的末尾我们可以得到 x = 12，reverseX = 123，
	// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
	return x == reverseX || x == reverseX/10
}
