package leetcode
/*
实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
必须 原地 修改，只允许使用额外常数空间。

题干的意思是：找出这个数组排序出的所有数中，刚好比当前数大的那个数
比如当前 nums = [1,2,3]。这个数是123，找出1，2，3这3个数字排序可能的所有数，排序后，比123大的那个数 也就是132
如果当前 nums = [3,2,1]。这就是1，2，3所有排序中最大的那个数，那么就返回1，2，3排序后所有数中最小的那个，也就是1，2，3 -> [1,2,3]
*/

/*
解法:
如果该子数组由数字按降序组成，那么没有对 a[i−1] 右侧的重新排列可以创建更大的排列。
我们需要从右边找到第一对两个连续的数字 a[i] 和 a[i−1]，它们满足 a[i]>a[i−1]。我们需要重新排列 a[i−1] 右边的数字，包括它自己。
我们需要将数字 a[i−1] 替换为位于其右侧区域的数字中比它大且最接近它的数字 a[j]。
我们交换数字 a[i−1] 和 a[j]。我们现在在索引 i−1 处有正确的数字。

但目前的排列仍然不是我们正在寻找的排列。
我们需要通过仅使用 a[i−1] 右边的数字来形成最小的排列
因此，我们需要放置那些按升序排列的数字，以获得最小的排列。
但是，请记住，在从右侧扫描数字时，我们只是继续递减索引直到我们找到 a[i] 和 a[i−1] 这对数。
其中，a[i]>a[i−1]。因此 a[i−1] 右边的所有数字都已按降序排序。此外，交换 a[i−1] 和 a[j] 并未改变该顺序。
因此，我们只需要反转 a[i−1] 之后的数字，以获得下一个最小的字典排列。


结果: 执行用时 :0 ms 内存消耗 :2.5 MB
*/

func nextPermutation(nums []int) {
	var i = len(nums) - 2
	for i >= 0 && nums[i+1] <= nums[i] {
		i--
	}
	if i >= 0 {
		var j = len(nums) - 1
		for j >= 0 && nums[j] <= nums[i] {
			j--
		}
		nums[i], nums[j] = nums[j], nums[i]
	}
	if i >= -1 {
		reverse(nums, i+1)
	}
}

func reverse(nums []int, start int) {
	var i, j = start, len(nums) - 1
	for i < j {
		nums[i], nums[j] = nums[j], nums[i]
		i++
		j--
	}
}
